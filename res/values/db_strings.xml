<?xml version="1.0" encoding="utf-8"?>
<!--
    This file is part of LogMyLife, an application for logging events.
    Copyright (C) 2011 Luke Meyer

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License along
    with this program (see LICENSE file).
    If not, see http://www.gnu.org/licenses/
 -->
<resources>

<!-- Database level 1 (initial) -->
  <string name="db_1_create_groups">
    CREATE TABLE Groups (
      _id INTEGER PRIMARY KEY,
      name TEXT NOT NULL
    );
  </string>
  <string name="db_1_create_trackers">
    CREATE TABLE Trackers (
      _id INTEGER PRIMARY KEY,
      group_id INTEGER NOT NULL,
      name TEXT NOT NULL,
      body TEXT,
      last_log_id INTEGER,
      flag_skip_next_alert BOOLEAN DEFAULT 0
    );
  </string>
  <string name="db_1_create_logs">
    CREATE TABLE TrackerLogs (
      _id INTEGER PRIMARY KEY,
      tracker_id INTEGER NOT NULL,
      log_time DATETIME NOT NULL,
      body TEXT default \'\',
      value NUMERIC default NULL,
      is_break BOOLEAN default 0
    );
  </string>
  <string name="db_1_create_alerts">
    create table Alerts (
      _id INTEGER PRIMARY KEY,
      tracker_id INTEGER NOT NULL,
      interval_months INTEGER DEFAULT 0,
      interval_weeks INTEGER DEFAULT 0,
      interval_days INTEGER DEFAULT 0,
      interval_hours INTEGER DEFAULT 0,
      interval_minutes INTEGER DEFAULT 0,
      interval_seconds INTEGER DEFAULT 0,
      ringtone TEXT,
      is_enabled BOOLEAN DEFAULT 1,
      skip_next BOOLEAN DEFAULT 0,
      next_time DATETIME
    );
  </string>
  <string name="db_1_create_tracker_group_id_idx">
    create index tracker_group_id_idx on Trackers (group_id);
  </string>
  <string name="db_1_create_log_tracker_time_idx">
    create index log_tracker_time_idx on TrackerLogs (tracker_id ASC, log_time DESC);
  </string>
  <string name="db_1_create_alert_tracker_id_idx">
    create index alert_tracker_id_idx on Alerts (tracker_id);
  </string>  
<!-- Database level 2 -->
  <string name="db_2_alter_tracker_add_value_label">
    alter table Trackers add value_label TEXT;
  </string>
  <string name="db_2_alter_tracker_add_value_label_pos">
    alter table Trackers add value_label_position BOOLEAN DEFAULT 1;
  </string>
<!-- Database level 3 -->
  <!-- introduce types so user can specify what format the value will have -->
  <string name="db_3_alter_tracker_add_use_value">
      alter table Trackers add use_value BOOLEAN default 0;
  </string>
  <!-- even if the value isn't in use, remember what it was set to before -->
  <string name="db_3_alter_tracker_add_value_type">
    alter table Trackers add value_type INTEGER DEFAULT 0;
  </string>
  <!-- logs record them too because the tracker type might change later -->
  <string name="db_3_alter_logs_add_value_type">
    alter table TrackerLogs add value_type INTEGER DEFAULT 0;
  </string>
  <string name="db_3_update_trackers_set_use_value">
    update Trackers
    set use_value = 1
    where _id in (
      select tracker_id
      from TrackerLogs
      where value is not null
    );
  </string>

<!-- Database level ? - future -->

  <string name="db_x_create_valuetypes">
    create table ValueTypes (
      _id INTEGER PRIMARY KEY,
      name TEXT NOT NULL,
      type TEXT NOT NULL
    );
  </string>

<!-- Canned queries to be used -->
  
  <string name="db_select_trackers">
    select  t._id, name, log_time, tl.body
    from Trackers t LEFT JOIN TrackerLogs tl
    on (t.last_log_id = tl._id)
    where group_id = ?
  </string>
  <string name="db_select_trackers_filter">
    select  t._id, name, log_time, tl.body
    from Trackers t LEFT JOIN TrackerLogs tl
    on (t.last_log_id = tl._id)
    where group_id = ?
    and t.name like ?
  </string>
  <string name="db_update_tracker_last_log">
      update Trackers
      set last_log_id = (
                      select _id
                      from TrackerLogs
                      where tracker_id = Trackers._id
                      order by log_time desc, _id
                      limit 1
                      )
              where _id = ?
      ;
  </string>

<!-- configuration of values user sees -->
  <string name="db_first_list">General</string>
  <!--  string name="db_first_value_type">Number</string>
  <string name="db_first_value_name">Number</string -->

</resources>
